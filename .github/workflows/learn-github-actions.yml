name: reviewdog
on: [pull_request]
jobs:
  golangci-lint:
    permissions:
      checks: write
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request'
    name: runner / golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.github_token }}
          golangci_lint_flags: "--enable-all --exclude-use-default=false -D wsl -D testpackage"
          level: "error"
          fail_on_error: "true"
          reporter: github-pr-review
          
#  golangci-lint-check:
#   permissions:
#    checks: write
#    contents: read
#    pull-requests: write
#   name: runner / golangci-lint (github-pr-review)
#   runs-on: ubuntu-latest
#   steps:
#    - name: Check out code into the Go module directory
#      uses: actions/checkout@v3
      
#    - name: Setup review dog
#      uses: reviewdog/action-setup@v1
      
#    - name: Install golint 
#      run: |
#       bash .github/scripts/setup_golint.sh

#    - name: Go lint check
#      env:
#       REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      run: | 
#       bash .github/scripts/reviewdog.sh
     

# golangci-lint-github-pr-review:
  #   name: runner / golangci-lint (github-pr-review)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v3

  #     - name: golangci-lint
  #       uses: reviewdog/action-golangci-lint@v2
  #       with:
  #         golangci_lint_flags: "./*.go"
  #         tool_name: "golangci-lint"
  #         reporter: "github-pr-review"
  #         level: error
  #         fail_on_error: "true"
  #         filter_mode: "nofilter"